-- TASK - 1: SETUP DATABASE AND SCHEMA 

CREATE OR REPLACE DATABASE SALES_DB;

CREATE OR REPLACE SCHEMA RAW_SCHEMA;

CREATE OR REPLACE SCHEMA FILE_FORMATS;

CREATE OR REPLACE STAGE SALES_STAGE;

CREATE OR REPLACE file format SALES_DB.FILE_FORMATS.CSVFORMAT
    TYPE = CSV
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1;

-- TASK - 2: LOAD RAW DATA

CREATE OR REPLACE TABLE SALES_RAW (
TRANSACTION_ID VARCHAR(100),
REGION VARCHAR(100),
COUNTRY VARCHAR(100),
PRODUCT VARCHAR(100),
CUSTOMER VARCHAR(100),
SALES_REP VARCHAR(100),
TRANSACTION_DATE VARCHAR(100),
TIMESTAMP VARCHAR(100),
QUANTITY VARCHAR(100),
UNIT_PRICE VARCHAR(100),
TOTAL_AMOUNT VARCHAR(100),
ORDER_STATUS VARCHAR(20),
PAYMENT_METHOD VARCHAR(100),
PRODUCT_DETAILS STRING, 
CUSTOMER_INFO STRING 
);

-- TO CHECK THE ERRORS BEFORE COPYING THE DATA.
COPY INTO RAW_SCHEMA.SALES_RAW
FROM @RAW_SCHEMA.SALES_STAGE
FILE_FORMAT = (FORMAT_NAME = FILE_FORMATS.CSVFORMAT)
VALIDATION_MODE = 'RETURN_ALL_ERRORS';

-- COPYING THE DATA
COPY INTO RAW_SCHEMA.SALES_RAW
FROM @RAW_SCHEMA.SALES_STAGE
FILE_FORMAT = (FORMAT_NAME = FILE_FORMATS.CSVFORMAT)
ON_ERROR = CONTINUE;

SELECT * FROM RAW_SCHEMA.SALES_RAW;


-- TASK - 3: COUNT OF TOTAL VS DISTINCT TRANSACTIONS , NULL VALUES,NEGATIVE COUNT
SELECT COUNT(*) AS TOTAL_TRANSACTIONS
FROM RAW_SCHEMA.SALES_RAW;

SELECT COUNT(DISTINCT TRANSACTION_ID) AS DISTINCT_TRANSACTIONS
FROM RAW_SCHEMA.SALES_RAW;

SELECT COUNT(*) AS NEGATIVE_COUNT
FROM RAW_SCHEMA.SALES_RAW
WHERE UNIT_PRICE < 0;

SELECT COUNT(*) AS COUNT_OF_NULL_VALUES FROM RAW_SCHEMA.SALES_RAW
WHERE TRANSACTION_ID IS NULL OR
REGION IS NULL OR
COUNTRY IS NULL OR
PRODUCT IS NULL OR
CUSTOMER IS NULL OR
SALES_REP IS NULL OR
TRANSACTION_DATE IS NULL OR
TIMESTAMP IS NULL OR
QUANTITY IS NULL OR
UNIT_PRICE IS NULL OR
TOTAL_AMOUNT IS NULL OR
ORDER_STATUS IS NULL OR
PAYMENT_METHOD IS NULL OR
PRODUCT_DETAILS IS NULL OR
CUSTOMER_INFO IS NULL;

-- TASK - 4: FLATTEN JSON DATA
CREATE OR REPLACE TABLE CLEAN_SCHEMA.SALES_FLATTENED AS
SELECT
    TRANSACTION_ID,
    TRY_PARSE_JSON(PRODUCT_DETAILS):category::STRING AS PRODUCT_CATEGORY,
    TRY_PARSE_JSON(PRODUCT_DETAILS):subcategory::STRING AS PRODUCT_SUBCATEGORY,
    TRY_PARSE_JSON(PRODUCT_DETAILS):brand::STRING AS PRODUCT_BRAND,
    TRY_PARSE_JSON(PRODUCT_DETAILS):specs::STRING AS PRODUCT_SPECS,
    TRY_PARSE_JSON(CUSTOMER_INFO):segment::STRING AS CUSTOMER_SEGMENT,
    TRY_PARSE_JSON(CUSTOMER_INFO):demographics::STRING AS CUSTOMER_DEMOGRAPHICS,
    TRY_PARSE_JSON(CUSTOMER_INFO):preferences::STRING AS CUSTOMER_PREFERENCES
FROM RAW_SCHEMA.SALES_RAW;
 
SELECT * FROM CLEAN_SCHEMA.SALES_FLATTENED;

-- CHECKING FOR THE FLATTENED:
-- SELECT 
-- TRANSACTION_ID,
-- REGION,
-- COUNTRY,
-- PRODUCT,
-- CUSTOMER,
-- SALES_REP,
-- TRANSACTION_DATE,
-- TIMESTAMP,
-- QUANTITY,
-- UNIT_PRICE,
-- TOTAL_AMOUNT,
-- ORDER_STATUS,
-- PAYMENT_METHOD,
-- TRY_PARSE_JSON(PRODUCT_DETAILS):category::STRING AS PRODUCT_CATEGORY,
-- TRY_PARSE_JSON(PRODUCT_DETAILS):subcategory::STRING AS PRODUCT_SUBCATEGORY,
-- TRY_PARSE_JSON(PRODUCT_DETAILS):brand::STRING AS PRODUCT_BRAND,
-- TRY_PARSE_JSON(PRODUCT_DETAILS):specs::STRING AS PRODUCT_SPECS,
-- TRY_PARSE_JSON(PRODUCT_DETAILS):ratings::INT AS PRODUCT_RATINGS,
-- TRY_PARSE_JSON(CUSTOMER_INFO):segment::STRING AS CUSTOMER_SEGMENT,
-- TRY_PARSE_JSON(CUSTOMER_INFO):demographics::STRING AS CUSTOMER_DEMOGRAPHICS,
-- TRY_PARSE_JSON(CUSTOMER_INFO):preferences::STRING AS CUSTOMER_PREFERENCES
-- FROM RAW_SCHEMA.SALES_RAW limit 20;


-- TASK - 5:CLEAN AND TRANSFORM DATA 
CREATE OR REPLACE SCHEMA CLEAN_SCHEMA

CREATE OR REPLACE TABLE SALES_DB.CLEAN_SCHEMA.SALES_CLEANED_TABLE AS
SELECT 
TRANSACTION_ID, 
REGION,
COUNTRY,
PRODUCT,
CUSTOMER,
SALES_REP,
TRY_TO_DATE(TRANSACTION_DATE, 'DD-MM-YYYY') AS TRANSACTION_DATE,
TIMESTAMP,
TRY_TO_NUMBER(QUANTITY) AS QUANTITY,
TRY_TO_NUMBER(UNIT_PRICE) AS UNIT_PRICE,
TRY_TO_NUMBER(TOTAL_AMOUNT) AS TOTAL_AMOUNT,
ORDER_STATUS,
PAYMENT_METHOD,
TRY_PARSE_JSON(PRODUCT_DETAILS):category::STRING AS PRODUCT_CATEGORY,
TRY_PARSE_JSON(PRODUCT_DETAILS):subcategory::STRING AS PRODUCT_SUBCATEGORY,
TRY_PARSE_JSON(PRODUCT_DETAILS):brand::STRING AS PRODUCT_BRAND,
TRY_PARSE_JSON(PRODUCT_DETAILS):specs::STRING AS PRODUCT_SPECS,
TRY_PARSE_JSON(CUSTOMER_INFO):segment::STRING AS CUSTOMER_SEGMENT,
TRY_PARSE_JSON(CUSTOMER_INFO):demographics::STRING AS CUSTOMER_DEMOGRAPHICS,
TRY_PARSE_JSON(CUSTOMER_INFO):preferences::STRING AS CUSTOMER_PREFERENCES
FROM SALES_DB.RAW_SCHEMA.SALES_RAW
WHERE TRANSACTION_ID IS NOT NULL
OR REGION IS NOT NULL OR
COUNTRY IS NOT NULL OR
PRODUCT IS NOT NULL OR
CUSTOMER IS NOT NULL OR
SALES_REP IS NOT NULL OR
TRANSACTION_DATE IS NOT NULL OR
TIMESTAMP IS NOT NULL OR
QUANTITY IS NOT NULL OR
UNIT_PRICE IS NOT NULL OR
TOTAL_AMOUNT IS NOT NULL OR
ORDER_STATUS IS NOT NULL OR
PAYMENT_METHOD IS NOT NULL;

SELECT * FROM SALES_DB.CLEAN_SCHEMA.SALES_CLEANED_TABLE;

-- DELETING THE NULL VALUES
DELETE FROM SALES_DB.CLEAN_SCHEMA.SALES_CLEANED_TABLE
WHERE TRANSACTION_ID IS NULL OR
REGION IS NULL OR
COUNTRY IS NULL OR
PRODUCT IS NULL OR
CUSTOMER IS NULL OR
SALES_REP IS NULL OR
TRANSACTION_DATE IS NULL OR
TIMESTAMP IS NULL OR
QUANTITY IS NULL OR
UNIT_PRICE IS NULL OR
TOTAL_AMOUNT IS NULL OR
ORDER_STATUS IS NULL OR
PAYMENT_METHOD IS NULL;

SELECT * FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;

-- TASK - 6: FEATURE ENGINEERING 

ALTER TABLE CLEAN_SCHEMA.SALES_CLEANED_TABLE
ADD COLUMN PROFIT_MARGIN FLOAT;

ALTER TABLE CLEAN_SCHEMA.SALES_CLEANED_TABLE
ADD COLUMN SALES_QUARTER STRING;

UPDATE CLEAN_SCHEMA.SALES_CLEANED_TABLE
SET 
    PROFIT_MARGIN = TOTAL_AMOUNT * 0.2,
    SALES_QUARTER = CASE 
            WHEN MONTH(TRANSACTION_DATE) BETWEEN 1 AND 3 THEN 'QUARTER-1'
            WHEN MONTH(TRANSACTION_DATE) BETWEEN 4 AND 6 THEN 'QUARTER-2'
            WHEN MONTH(TRANSACTION_DATE) BETWEEN 7 AND 9 THEN 'QUARTER-3'
            WHEN MONTH(TRANSACTION_DATE) BETWEEN 10 AND 12 THEN 'QUARTER-4'
            ELSE 'INVALID'
    END;
SELECT * FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;
DESC TABLE CLEAN_SCHEMA.SALES_CLEANED_TABLE;
 
-- TASK - 7: CREATE FACT AND DIMENSION TABLES
CREATE OR REPLACE SCHEMA STAR_SCHEMA;

-- FACT TABLES
CREATE OR REPLACE TABLE STAR_SCHEMA_SALES_FACT_TABLE AS 
SELECT
TRANSACTION_ID,
TRANSACTION_DATE,
PRODUCT AS PRODUCT_NAME,
REGION,
COUNTRY,
QUANTITY,
CUSTOMER,
SALES_REP,
TIMESTAMP,
UNIT_PRICE,
TOTAL_AMOUNT,
ORDER_STATUS,
PAYMENT_METHOD
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;

SELECT * FROM STAR_SCHEMA_SALES_FACT_TABLE;

-- DIMENSIONS TABLES
-- REGION DIMENSION TABLE
CREATE OR REPLACE TABLE STAR_SCHEMA.DIM_REGION_TABLE
AS SELECT DISTINCT PRODUCT,REGION ,COUNTRY 
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;

SELECT * FROM STAR_SCHEMA.DIM_REGION_TABLE;

-- PRODUCT DIMENSION TABLE
CREATE OR REPLACE TABLE STAR_SCHEMA.DIM_PRODUCT_TABLE
AS SELECT 
TRANSACTION_ID,
PRODUCT_CATEGORY,
PRODUCT_SUBCATEGORY,
PRODUCT_BRAND,
PRODUCT_SPECS,
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;

SELECT * FROM STAR_SCHEMA.DIM_PRODUCT_TABLE;

-- CUSTOMER DIMENSION TABLE
CREATE OR REPLACE TABLE STAR_SCHEMA.DIM_CUSTOMER_TABLE
AS SELECT
TRANSACTION_ID,
CUSTOMER_SEGMENT,
CUSTOMER_DEMOGRAPHICS,
CUSTOMER_PREFERENCES
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;

SELECT * FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE;

-- TASK - 8: REPORTING
SELECT REGION, COUNTRY, SUM(TOTAL_AMOUNT) AS SUM_OF_SALES
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE
GROUP BY REGION, COUNTRY
ORDER BY SUM_OF_SALES DESC;

SELECT CUSTOMER_SEGMENT, SUM(TOTAL_AMOUNT) AS SUM_OF_SALES
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE
GROUP BY CUSTOMER_SEGMENT
ORDER BY SUM_OF_SALES DESC;

SELECT PRODUCT_BRAND, SUM(TOTAL_AMOUNT) AS SUM_OF_SALES
FROM CLEAN_SCHEMA.SALES_CLEANED_TABLE
GROUP BY PRODUCT_BRAND
ORDER BY SUM_OF_SALES DESC;

SELECT ORDER_STATUS, COUNT(*)AS ORDER_COUNT
FROM STAR_SCHEMA.STAR_SCHEMA_SALES_FACT_TABLE
GROUP BY ORDER_STATUS
ORDER BY ORDER_COUNT DESC;






